version: "3.8"
services:

  db_cadastro_ifood:
    container_name: db_cadastro_ifood
    image: debezium/example-postgres:1.9.6.Final 
    environment:
      POSTGRES_USER: study
      POSTGRES_PASSWORD: study
      POSTGRES_DB: ifood-cadastro
    volumes:
      - postgres_data_cadastro:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - ifood

  connect_debezium:
    image: debezium/connect:1.9.6.Final 
    environment:
      - BOOTSTRAP_SERVERS=kafkabroker:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
    volumes:
      - connect-storage:/kafka
    ports:
      - "8083:8083"
    links:
      - kafkabroker
      - db_cadastro_ifood
      - zookeeper_ifood
    depends_on:
      - kafkabroker
      - zookeeper_ifood
      - db_cadastro_ifood
    networks:
      - ifood

  db_marketplace_ifood:
    container_name: db_marketplace_ifood
    image: postgres:14.1
    environment:
      POSTGRES_USER: marketplace
      POSTGRES_PASSWORD: marketplace
      POSTGRES_DB: ifood-marketplace
    volumes:
      - postgres_data_marketplace:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - ifood

  keycloak_ifood:
    container_name: keycloak_ifood
    image: jboss/keycloak:9.0.3
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
    volumes:
      - keycloak_data:/var/lib/keycloak/data
      - keycloak_data_standalone:/opt/jboss/keycloak/standalone/data
    ports:
      - "8190:8080"
    networks:
      - ifood

  jaeger_ifood:
    container_name: jaeger_ifood
    image: jaegertracing/all-in-one:1.38
    volumes:
      - jaeger-storage:/badger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "9411:9411"
    networks:
      - ifood

  promethues_ifood:
    image: prom/prometheus:v2.39.0
    container_name: prometheus_ifood
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command: --config.file=/etc/prometheus/prometheus.yml
    network_mode: "host"

  grafana_ifood:
    container_name: grafana_ifood
    image: grafana/grafana:9.1.7
    volumes:
      - grafana-storage:/var/lib/grafana
    network_mode: "host"
    depends_on:
      - promethues_ifood
  #    networks:
  #      - ifood

  activemq_ifood:
    container_name: activemq_ifood
    image: vromero/activemq-artemis:2.16.0
    environment:
      ARTEMIS_USERNAME: admin
      ARTEMIS_PASSWORD: admin
    ports:
      - "8161:8161"
      - "61616:61616"
      - "5672:5672"
    networks:
      - ifood

  mongodb_ifood:
    container_name: mongodb_ifood
    image: mongo:6.0.3
    volumes:
      - mongodb-storage:/etc/mongo
    ports:
      - "27027:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: pedido
      MONGO_INITDB_ROOT_PASSWORD: pedido
      MONGO_INITDB_DATABASE: pedidos
    networks:
      - ifood

  zookeeper_ifood:
    container_name: zookeeper_ifood
    image: debezium/zookeeper:1.9.6.Final 
    environment:
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "*"
      4LW_COMMANDS_WHITELIST: "*"
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
    healthcheck:
      test: [ "CMD-SHELL", "$$ZK_HOME/bin/zkServer.sh status | grep -q 'standalone' || exit 1" ]
      interval: 10s
      timeout: 10s
      start_period: 10s
      retries: 10
    networks:
      - ifood

  kafkabroker:
    container_name: kafka
    image: debezium/kafka:1.9.6.Final 
    ports:
      - "9092:9092"
    links:
      - zookeeper_ifood
    environment:
      ZOOKEEPER_CONNECT: zookeeper_ifood:2181
    depends_on:
      zookeeper_ifood:
        condition: service_healthy
    networks:
      - ifood

  kafdrop_ifood:
    container_name: kafdrop_ifood
    image: obsidiandynamics/kafdrop:3.28.0
    environment:
      KAFKA_BROKERCONNECT: kafkabroker:9092
    ports:
      - "9000:9000"
    depends_on:
      - kafkabroker
    networks:
      - ifood

  elasticsearch:
    image: docker.io/elastic/elasticsearch:7.16.3
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      discovery.type: "single-node"
    healthcheck:
      test: curl --fail --silent --write-out 'Elastic healthcheck status code %{http_code}' --output /dev/null http://elasticsearch:9200
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - elk
      - ifood

  logstash:
    image: docker.io/elastic/logstash:7.16.3
    volumes:
      - source: ./pipelines
        target: /usr/share/logstash/pipeline
        type: bind
    ports:
      - "12201:12201/udp"
      - "5000:5000"
      - "9600:9600"
    networks:
      - elk
    depends_on:
      elasticsearch:
        condition: service_healthy


  kibana:
    image: docker.io/elastic/kibana:7.16.3
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      elasticsearch:
        condition: service_healthy
networks:
  ifood:
    driver: bridge
    name: network_ifood
  elk:
    driver: bridge
    name: net_elk

volumes:
  keycloak_data:
    name: keycloak_data
  keycloak_data_standalone:
    name: keycloak_data_standalone
  postgres_data_cadastro:
    name: postgres_data_cadastro
  postgres_data_marketplace:
    name: postgres_data_marketplace
  grafana-storage:
    name: grafana-storage
  jaeger-storage:
    name: jaeger-storage
  activemq-storage:
    name: activemq-storage
  mongodb-storage:
    name: mongodb-storage
  elasticsearch-storage:
    name: elasticsearch-storage
  connect-storage:
    name: connect-storage
